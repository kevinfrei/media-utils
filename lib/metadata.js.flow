// @flow
// @format
'use strict';

const path = require('path');

const ocp = require('child_process');

const util = require('util');

const {
  ObjUtil
} = require('@freik/core-utils');

const {
  ProcUtil
} = require('@freik/node-utils');

import type { SimpleMetadata, FullMetadata, attributes, regexPattern, mdAcquire, mdAcquireAsync } from './index';
import type { spawnResult } from '@freik/node-utils';
const cp = {
  spawnAsync: ProcUtil.spawnAsync,
  ...ocp
};
let cwd: string = process.cwd();
declare var setCwd: (path: string) => void;
let patterns: Array<regexPattern> = [{
  compilation: 'va',
  rgx: /^(?:.*\/)?(?:(?:va(?:rious artists)?)) - (\d+) - ([^\/]+)\/(\d+)(?: ?[-\.])? ([^\/]+) - ([^\/]+)$/i,
  metadata: {
    year: 1,
    album: 2,
    track: 3,
    artist: 4,
    title: 5
  }
}, {
  compilation: 'va',
  rgx: /^(?:.*\/)?(?:(?:va(?:various artists)?)) - ([^\/]+)\/(\d+)(?: ?[-\.])? ([^\/]+) - ([^\/]+)$/i,
  metadata: {
    album: 1,
    track: 2,
    artist: 3,
    title: 4
  }
}, {
  compilation: 'ost',
  rgx: /^(?:.*\/)?(?:(?:ost)|(?:soundtrack)) - (\d+) - ([^\/]+)\/(\d+)(?: ?[-\.])? ([^\/]+) - ([^\/]+)$/i,
  metadata: {
    year: 1,
    album: 2,
    track: 3,
    artist: 4,
    title: 5
  }
}, {
  compilation: 'ost',
  rgx: /^(?:.*\/)?(?:(?:ost)|(?:soundtrack)) - ([^\/]+)\/(\d+)(?: [-\.])? ([^\/]+) - ([^\/]+)$/i,
  metadata: {
    album: 1,
    track: 2,
    artist: 3,
    title: 4
  }
}, {
  rgx: /^(?:.*\/)?([^\/]+) - (\d+) - ([^\/]+)\/(\d+)(?: ?[-\.])? ([^\/]+)$/i,
  metadata: {
    artist: 1,
    year: 2,
    album: 3,
    track: 4,
    title: 5
  }
}, {
  rgx: /^(?:.*\/)?([^\/]+) - ([^\/]+)\/(\d+)(?: ?[-\.])? ([^\/]+)$/i,
  metadata: {
    artist: 1,
    album: 2,
    track: 3,
    title: 4
  }
}];
const moreArtistsRE: RegExp = /\[(?:(?:w-)|(?:feat-)|(?:with)|(?:featuring)) (.*)\]/i;
declare var getArtists: (artists: string) => Array<string>; // This should pull the [w- Someone & Somebody else] from the title, and
// stick it in the artists array

declare var pullArtistsFromTitle: (title: string) => {
  title: string,
  artists: Array<string>,
};
declare var addPattern: (rgx: RegExp, metadata: {
  [key: string]: number
}, compilation: ?any) => any;
declare var fromPath: (pathname: any) => ?Object;
declare var fromFileArgs: (pathname: string) => Array<string>;
declare var fromFileFinish: (res: spawnResult | child_process$spawnSyncRet) => ?SimpleMetadata;
declare var fromFileAsync: (pathname: string) => any;
declare var fromFile: (pathname: string) => any;
declare var FullFromObj: (file: string, data: attributes) => ?FullMetadata;
module.exports = {
  fromFile,
  fromFileAsync,
  fromPath,
  addPattern,
  FullFromObj,
  setCwd
};