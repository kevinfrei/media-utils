{"version":3,"sources":["../src/metadata.js"],"names":["path","require","ocp","util","ObjUtil","ProcUtil","cp","spawnAsync","cwd","process","setCwd","patterns","compilation","rgx","metadata","year","album","track","artist","title","moreArtistsRE","getArtists","artists","indexOf","split","join","pullArtistsFromTitle","match","replace","trim","addPattern","push","fromPath","pathname","makeMetaDataFromRegex","pattern","test","exec","result","attr","hasOwnProperty","index","theExtension","extname","length","substr","fromFileArgs","deQuote","fromFileFinish","res","error","status","stdout","readyForParsing","toString","reQuote","comp","undefined","console","log","albumArtist","fromFileAsync","encoding","fromFile","spawnSync","FullFromObj","file","data","OriginalPath","Artist","Album","Track","Title","theArtist","artistArray","Number","parseInt","MoreArtists","Year","moreArtists","VAType","module","exports"],"mappings":"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","sourcesContent":["// @flow\n// @format\n'use strict';\n\nconst path = require('path');\nconst ocp = require('child_process');\nconst util = require('util');\n\nconst { ObjUtil } = require('my-utils');\nconst { ProcUtil } = require('my-node-utils');\n\nimport type {\n  SimpleMetadata,\n  FullMetadata,\n  attributes,\n  regexPattern,\n  mdAcquire,\n  mdAcquireAsync,\n} from './index';\n\nimport type { spawnResult } from 'my-node-utils';\n\nconst cp = {\n  spawnAsync: ProcUtil.spawnAsync,\n  ...ocp,\n};\n\nlet cwd: string = process.cwd();\n\nconst setCwd = (path: string): void => {\n  cwd = path;\n};\n\nlet patterns: Array<regexPattern> = [\n  {\n    compilation: 'va',\n    rgx: /^(?:.*\\/)?(?:(?:va(?:rious artists)?)) - (\\d+) - ([^\\/]+)\\/(\\d+)(?: ?[-\\.])? ([^\\/]+) - ([^\\/]+)$/i,\n    metadata: { year: 1, album: 2, track: 3, artist: 4, title: 5 },\n  },\n  {\n    compilation: 'va',\n    rgx: /^(?:.*\\/)?(?:(?:va(?:various artists)?)) - ([^\\/]+)\\/(\\d+)(?: ?[-\\.])? ([^\\/]+) - ([^\\/]+)$/i,\n    metadata: { album: 1, track: 2, artist: 3, title: 4 },\n  },\n  {\n    compilation: 'ost',\n    rgx: /^(?:.*\\/)?(?:(?:ost)|(?:soundtrack)) - (\\d+) - ([^\\/]+)\\/(\\d+)(?: ?[-\\.])? ([^\\/]+) - ([^\\/]+)$/i,\n    metadata: { year: 1, album: 2, track: 3, artist: 4, title: 5 },\n  },\n  {\n    compilation: 'ost',\n    rgx: /^(?:.*\\/)?(?:(?:ost)|(?:soundtrack)) - ([^\\/]+)\\/(\\d+)(?: [-\\.])? ([^\\/]+) - ([^\\/]+)$/i,\n    metadata: { album: 1, track: 2, artist: 3, title: 4 },\n  },\n  {\n    rgx: /^(?:.*\\/)?([^\\/]+) - (\\d+) - ([^\\/]+)\\/(\\d+)(?: ?[-\\.])? ([^\\/]+)$/i,\n    metadata: { artist: 1, year: 2, album: 3, track: 4, title: 5 },\n  },\n  {\n    rgx: /^(?:.*\\/)?([^\\/]+) - ([^\\/]+)\\/(\\d+)(?: ?[-\\.])? ([^\\/]+)$/i,\n    metadata: { artist: 1, album: 2, track: 3, title: 4 },\n  },\n];\n\nconst moreArtistsRE: RegExp = /\\[(?:(?:w-)|(?:feat-)|(?:with)|(?:featuring)) (.*)\\]/i;\nconst getArtists = (artists: string): Array<string> => {\n  if (artists.indexOf(' & ') >= 0) {\n    return artists.split(', ').join(' & ').split(' & ');\n  } else {\n    return [artists];\n  }\n};\n\n// This should pull the [w- Someone & Somebody else] from the title, and\n// stick it in the artists array\nconst pullArtistsFromTitle = (\n  title: string\n): { title: string, artists: Array<string> } => {\n  const match = title.match(moreArtistsRE);\n  if (!match) {\n    return { title, artists: [] };\n  }\n  const artists = getArtists(match[1]);\n  title = title.replace(moreArtistsRE, '').trim();\n  return { title, artists };\n};\n\nconst addPattern = (\n  rgx: RegExp,\n  metadata: { [key: string]: number },\n  compilation: ?any\n) => {\n  if (compilation) {\n    patterns.push({ rgx, metadata, compilation: true });\n  } else {\n    patterns.push({ rgx, metadata });\n  }\n};\n\nconst fromPath: mdAcquire = (pathname): ?Object => {\n  pathname = pathname.replace(/\\\\/g, '/');\n\n  // A little helper\n  const makeMetaDataFromRegex = (\n    pathname: string,\n    pattern: regexPattern\n  ): ?{ [key: string]: string } => {\n    if (!pattern.rgx.test(pathname)) {\n      return;\n    }\n    const match = pattern.rgx.exec(pathname);\n    if (!match) {\n      return;\n    }\n    let result: { [key: string]: string } = {};\n    // Comment syntax because otherwise it confuses syntax highlighting :/\n    for (let attr /*: string*/ in pattern.metadata) {\n      if (pattern.metadata.hasOwnProperty(attr)) {\n        let index = pattern.metadata[attr];\n        result[attr] = match[index];\n      }\n    }\n    if (typeof pattern.compilation === 'string') {\n      result.compilation = pattern.compilation;\n    } else if (pattern.compilation === true) {\n      result.compilation = 'va';\n    }\n    return result;\n  };\n\n  let theExtension: ?string = path.extname(pathname);\n  if (!theExtension || theExtension.length < 3) {\n    return;\n  }\n  if (theExtension[0] === '.') {\n    theExtension = theExtension.substr(1);\n  }\n  pathname = pathname.substr(0, pathname.length - 1 - theExtension.length);\n  for (let pattern /*: regexPattern*/ of patterns) {\n    let result: ?{ [key: string]: string } = makeMetaDataFromRegex(\n      pathname,\n      pattern\n    );\n    if (result) {\n      return result;\n    }\n  }\n};\n\nconst fromFileArgs = (pathname: string): Array<string> => [\n  ObjUtil.deQuote(\n    '--Output=General;{\"artist\":\"%Performer%\",' +\n      '\"albumArtist\":\"%Album/Performer%\",' +\n      '\"compilation\":\"%Compilation%\",' +\n      '\"year\":\"%Recorded_Date%\",' +\n      '\"album\":\"%Album%\",' +\n      '\"track\":\"%Track/Position%\",' +\n      '\"title\":\"%Title%\"}'\n  ),\n  pathname,\n];\n\nconst fromFileFinish = (\n  res: spawnResult | child_process$spawnSyncRet\n): ?SimpleMetadata => {\n  if (res.error || res.status || res.stdout.length < 20) {\n    return;\n  }\n\n  let readyForParsing: string = res.stdout.toString();\n  readyForParsing = readyForParsing.replace(/[\\x01-\\x1f]/g, '');\n  let metadata: { [key: string]: string } = ObjUtil.reQuote(readyForParsing);\n\n  // Requirements: Album, Artist, Track, Title\n  if (\n    !metadata.title ||\n    !metadata.track ||\n    !metadata.artist ||\n    !metadata.album\n  ) {\n    return;\n  }\n  let title = metadata.title.trim();\n  let track = metadata.track.trim();\n  let album = metadata.album.trim();\n  let artist = metadata.artist.trim();\n  let comp: ?string = metadata.compilation\n    ? metadata.compilation.trim()\n    : undefined;\n  let year: ?string = metadata.year ? metadata.year.trim() : undefined;\n\n  // There's some weirdnes WRT %Performer% sometimes...\n  const split = artist.split(' / ');\n  if (split.length === 2 && split[0] === split[1]) {\n    artist = split[0].trim();\n  } else if (split.length > 1) {\n    console.log(artist);\n  }\n\n  if (metadata.albumArtist === '') {\n    delete metadata.albumArtist;\n  } else if (\n    false &&\n    metadata.albumArtist === metadata.artist &&\n    metadata.albumArtist !== 'Various Artists'\n  ) {\n    delete metadata.albumArtist;\n  }\n  let compilation: ?('va' | 'ost');\n  if (\n    (comp && metadata.albumArtist) ||\n    metadata.albumArtist === 'Various Artists' ||\n    metadata.albumArtist === 'VA'\n  ) {\n    compilation = 'va';\n  } else if (\n    metadata.albumArtist === 'Soundtrack' ||\n    metadata.albumArtist === 'ost'\n  ) {\n    compilation = 'ost';\n  }\n\n  if (compilation && year) {\n    return { artist, album, year, track, title, compilation };\n  } else if (compilation) {\n    return { artist, album, track, title, compilation };\n  } else if (year) {\n    return { artist, album, track, title, year };\n  } else {\n    return { artist, album, track, title };\n  }\n};\n\nconst fromFileAsync: mdAcquireAsync = async (pathname: string) =>\n  fromFileFinish(\n    await cp.spawnAsync('mediainfo', fromFileArgs(pathname), {\n      cwd: cwd,\n      encoding: 'utf8',\n    })\n  );\n\nconst fromFile: mdAcquire = (pathname: string) =>\n  fromFileFinish(\n    cp.spawnSync('mediainfo', fromFileArgs(pathname), {\n      cwd: cwd,\n      encoding: 'utf8',\n    })\n  );\n\nconst FullFromObj = (file: string, data: attributes): ?FullMetadata => {\n  let res: FullMetadata = {\n    OriginalPath: file,\n    Artist: '',\n    Album: '',\n    Track: 0,\n    Title: '',\n  };\n  /*    Year?: 0,\n    VAType?: 'va',\n    MoreArtists?: Array<string>,\n    Mix?: Array<string>,\n    Disk?: number,\n    DiskOf?: number\n*/\n  if (\n    !(data.hasOwnProperty('artist') || data.hasOwnProperty('albumArtist')) ||\n    !data.hasOwnProperty('album') ||\n    !data.hasOwnProperty('track') ||\n    !data.hasOwnProperty('title')\n  ) {\n    return;\n  }\n  let theArtist = data.hasOwnProperty('albumArtist')\n    ? data.albumArtist\n    : data.artist;\n  const artistArray = getArtists(theArtist);\n  res.Artist = (artistArray.length > 1) ? artistArray : theArtist;\n  res.Album = data.album;\n  res.Track = Number.parseInt(data.track);\n  const { title, artists } = pullArtistsFromTitle(data.title);\n  res.Title = title;\n  res.MoreArtists = artists;\n\n  // Now add any additional data we've got\n  if (data.hasOwnProperty('year')) {\n    res.Year = Number.parseInt(data.year);\n  }\n  if (data.hasOwnProperty('artist') && data.hasOwnProperty('albumArtist')) {\n    if (data.artist != data.albumArtist && res.MoreArtists) {\n      res.MoreArtists.push(data.artist);\n    }\n  }\n  if (data.hasOwnProperty('moreArtists') && res.MoreArtists) {\n    res.MoreArtists = [...res.MoreArtists, ...data.moreArtists];\n  } else if (res.MoreArtists && res.MoreArtists.length === 0) {\n    delete res.MoreArtists;\n  }\n  if (data.compilation) {\n    if (data.compilation === 'va') {\n      res.VAType = 'va';\n    } else if (data.compilation === 'ost') {\n      res.VAType = 'ost';\n    }\n  }\n  return res;\n};\n\nmodule.exports = {\n  fromFile,\n  fromFileAsync,\n  fromPath,\n  addPattern,\n  FullFromObj,\n  setCwd,\n};\n"],"file":"metadata.js"}