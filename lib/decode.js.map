{"version":3,"sources":["../src/decode.js"],"names":["path","require","ProcUtil","PathUtil","mp3","inputFile","outputFile","spawnRes","mp3Async","spawnResAsync","flac","flacAsync","aac","aacAsync","ffmpeg","ffmpegAsync","makeWave","fileType","wavConvert","wma","mp4","m4a","m4b","extname","length","substr","tmpFile","getTemp","undefined","Error","makeWaveAsync","module","exports","m4aAsync","wmaAsync"],"mappings":"AACA;AACA,a,CAEA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAyBF,OAAO,CAAC,mBAAD,CAAtC;;AAIA,MAAMG,GAAY,GAAG,CAACC,SAAD,EAAYC,UAAZ,KACnBJ,QAAQ,CAACK,QAAT,CAAkB,MAAlB,EAA0B,CAAC,SAAD,EAAY,UAAZ,EAAwBF,SAAxB,EAAmCC,UAAnC,CAA1B,CADF;;AAGA,MAAME,QAAsB,GAAG,OAAOH,SAAP,EAAkBC,UAAlB,KAC7BJ,QAAQ,CAACO,aAAT,CAAuB,MAAvB,EAA+B,CAAC,SAAD,EAAY,UAAZ,EAAwBJ,SAAxB,EAAmCC,UAAnC,CAA/B,CADF;;AAGA,MAAMI,IAAa,GAAG,CAACL,SAAD,EAAYC,UAAZ,KACpBJ,QAAQ,CAACK,QAAT,CAAkB,MAAlB,EAA0B,CAAC,IAAD,EAAOF,SAAP,EAAkB,IAAlB,EAAwBC,UAAxB,CAA1B,CADF;;AAGA,MAAMK,SAAuB,GAAG,OAAON,SAAP,EAAkBC,UAAlB,KAC9BJ,QAAQ,CAACO,aAAT,CAAuB,MAAvB,EAA+B,CAAC,IAAD,EAAOJ,SAAP,EAAkB,IAAlB,EAAwBC,UAAxB,CAA/B,CADF;;AAGA,MAAMM,GAAY,GAAG,CAACP,SAAD,EAAYC,UAAZ,KACnBJ,QAAQ,CAACK,QAAT,CAAkB,MAAlB,EAA0B,CAAC,IAAD,EAAOD,UAAP,EAAmBD,SAAnB,CAA1B,CADF;;AAGA,MAAMQ,QAAsB,GAAG,OAAOR,SAAP,EAAkBC,UAAlB,KAC7BJ,QAAQ,CAACO,aAAT,CAAuB,MAAvB,EAA+B,CAAC,IAAD,EAAOH,UAAP,EAAmBD,SAAnB,CAA/B,CADF;;AAGA,MAAMS,MAAe,GAAG,CAACT,SAAD,EAAYC,UAAZ,KACtBJ,QAAQ,CAACK,QAAT,CAAkB,QAAlB,EAA4B,CAAC,IAAD,EAAOF,SAAP,EAAkBC,UAAlB,CAA5B,CADF;;AAGA,MAAMS,WAAyB,GAAG,OAAOV,SAAP,EAAkBC,UAAlB,KAChCJ,QAAQ,CAACO,aAAT,CAAuB,QAAvB,EAAiC,CAAC,IAAD,EAAOJ,SAAP,EAAkBC,UAAlB,CAAjC,CADF,C,CAIA;AACA;;;AACA,MAAMU,QAAQ,GAAG,CAACX,SAAD,EAAoBY,QAApB,KAAmD;AAClE,QAAMC,UAEL,GAAG;AAAEd,IAAAA,GAAF;AAAOM,IAAAA,IAAP;AAAaS,IAAAA,GAAG,EAAEL,MAAlB;AAA0BM,IAAAA,GAAG,EAAER,GAA/B;AAAoCA,IAAAA,GAApC;AAAyCS,IAAAA,GAAG,EAAET,GAA9C;AAAmDU,IAAAA,GAAG,EAAEV;AAAxD,GAFJ;;AAGA,MAAI,CAACK,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAGjB,IAAI,CAACuB,OAAL,CAAalB,SAAb,CAAX;AACD;;AACD,MAAIY,QAAQ,CAACO,MAAT,GAAkB,CAAlB,IAAuBP,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAA3C,EAAgD;AAC9CA,IAAAA,QAAQ,GAAGA,QAAQ,CAACQ,MAAT,CAAgB,CAAhB,CAAX;AACD;;AACD,MAAIR,QAAQ,CAACO,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACD;;AACD,MAAIP,QAAQ,KAAK,KAAjB,EAAwB;AACtB,WAAOZ,SAAP;AACD;;AACD,QAAMqB,OAAe,GAAGvB,QAAQ,CAACwB,OAAT,CAAiB,QAAjB,EAA2B,KAA3B,CAAxB;;AACA,MAAIT,UAAU,CAACD,QAAD,CAAV,KAAyBW,SAA7B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,uBAAuBZ,QAAjC,CAAN;AACD;;AACD,MAAIC,UAAU,CAACD,QAAD,CAAV,CAAqBZ,SAArB,EAAgCqB,OAAhC,CAAJ,EAA8C;AAC5C,WAAOA,OAAP;AACD;AACF,CAvBD,C,CAyBA;AACA;;;AACA,MAAMI,aAAa,GAAG,OAAOzB,SAAP,EAA0BY,QAA1B,KAAkE;AACtF,QAAMC,UAEL,GAAG;AACFd,IAAAA,GAAG,EAAEI,QADH;AACaE,IAAAA,IAAI,EAAEC,SADnB;AAC8BQ,IAAAA,GAAG,EAAEJ,WADnC;AACgDK,IAAAA,GAAG,EAAEP,QADrD;AAEFD,IAAAA,GAAG,EAAEC,QAFH;AAEaQ,IAAAA,GAAG,EAAER,QAFlB;AAE4BS,IAAAA,GAAG,EAAET;AAFjC,GAFJ;;AAMA,MAAI,CAACI,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAGjB,IAAI,CAACuB,OAAL,CAAalB,SAAb,CAAX;AACD;;AACD,MAAIY,QAAQ,CAACO,MAAT,GAAkB,CAAlB,IAAuBP,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAA3C,EAAgD;AAC9CA,IAAAA,QAAQ,GAAGA,QAAQ,CAACQ,MAAT,CAAgB,CAAhB,CAAX;AACD;;AACD,MAAIR,QAAQ,CAACO,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACD;;AACD,MAAIP,QAAQ,KAAK,KAAjB,EAAwB;AACtB,WAAOZ,SAAP;AACD;;AACD,QAAMqB,OAAe,GAAGvB,QAAQ,CAACwB,OAAT,CAAiB,QAAjB,EAA2B,KAA3B,CAAxB;;AACA,MAAIT,UAAU,CAACD,QAAD,CAAV,KAAyBW,SAA7B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,uBAAuBZ,QAAjC,CAAN;AACD;;AACD,MAAK,MAAOC,UAAU,CAACD,QAAD,CAAX,CAAuBZ,SAAvB,EAAkCqB,OAAlC,CAAX,EAAwD;AACtD,WAAOA,OAAP;AACD;AACF,CA1BD;;AA4BAK,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,GAAG,EAAET,GADU;AAEfqB,EAAAA,QAAQ,EAAEpB,QAFK;AAGfT,EAAAA,GAHe;AAIfI,EAAAA,QAJe;AAKfE,EAAAA,IALe;AAMfC,EAAAA,SANe;AAOfQ,EAAAA,GAAG,EAAEL,MAPU;AAQfoB,EAAAA,QAAQ,EAAEnB,WARK;AASfH,EAAAA,GATe;AAUfC,EAAAA,QAVe;AAWfC,EAAAA,MAXe;AAYfC,EAAAA,WAZe;AAafC,EAAAA,QAbe;AAcfc,EAAAA;AAde,CAAjB","sourcesContent":["// @flow\n// @format\n'use strict';\n\n// Module:\n// media/decode\n// Provides compressed audio to wav file tools\n// Everything is synchronous currently\n\nconst path = require('path');\nconst { ProcUtil, PathUtil } = require('@freik/node-utils');\n\nimport type { decoder, decoderAsync } from './index';\n\nconst mp3: decoder = (inputFile, outputFile) =>\n  ProcUtil.spawnRes('lame', ['--quiet', '--decode', inputFile, outputFile]);\n\nconst mp3Async: decoderAsync = async (inputFile, outputFile) =>\n  ProcUtil.spawnResAsync('lame', ['--quiet', '--decode', inputFile, outputFile]);\n\nconst flac: decoder = (inputFile, outputFile) =>\n  ProcUtil.spawnRes('flac', ['-d', inputFile, '-o', outputFile]);\n\nconst flacAsync: decoderAsync = async (inputFile, outputFile) =>\n  ProcUtil.spawnResAsync('flac', ['-d', inputFile, '-o', outputFile]);\n\nconst aac: decoder = (inputFile, outputFile) =>\n  ProcUtil.spawnRes('faad', ['-o', outputFile, inputFile]);\n\nconst aacAsync: decoderAsync = async (inputFile, outputFile) =>\n  ProcUtil.spawnResAsync('faad', ['-o', outputFile, inputFile]);\n\nconst ffmpeg: decoder = (inputFile, outputFile) =>\n  ProcUtil.spawnRes('ffmpeg', ['-i', inputFile, outputFile]);\n\nconst ffmpegAsync: decoderAsync = async (inputFile, outputFile) =>\n  ProcUtil.spawnResAsync('ffmpeg', ['-i', inputFile, outputFile]);\n\n\n// K: we know we need to convert it.\n// First convert it to a .wav file\nconst makeWave = (inputFile: string, fileType: ?string): ?string => {\n  const wavConvert: {\n    [key: string]: decoder\n  } = { mp3, flac, wma: ffmpeg, mp4: aac, aac, m4a: aac, m4b: aac };\n  if (!fileType) {\n    fileType = path.extname(inputFile);\n  }\n  if (fileType.length > 0 && fileType[0] === '.') {\n    fileType = fileType.substr(1);\n  }\n  if (fileType.length < 1) {\n    return;\n  }\n  if (fileType === 'wav') {\n    return inputFile;\n  }\n  const tmpFile: string = PathUtil.getTemp('decode', 'wav');\n  if (wavConvert[fileType] === undefined) {\n    throw new Error('Unknown file type:' + fileType);\n  }\n  if (wavConvert[fileType](inputFile, tmpFile)) {\n    return tmpFile;\n  }\n};\n\n// K: we know we need to convert it.\n// First convert it to a .wav file\nconst makeWaveAsync = async (inputFile: string, fileType: ?string): Promise<?string> => {\n  const wavConvert: {\n    [key: string]: decoderAsync\n  } = {\n    mp3: mp3Async, flac: flacAsync, wma: ffmpegAsync, mp4: aacAsync,\n    aac: aacAsync, m4a: aacAsync, m4b: aacAsync\n  };\n  if (!fileType) {\n    fileType = path.extname(inputFile);\n  }\n  if (fileType.length > 0 && fileType[0] === '.') {\n    fileType = fileType.substr(1);\n  }\n  if (fileType.length < 1) {\n    return;\n  }\n  if (fileType === 'wav') {\n    return inputFile;\n  }\n  const tmpFile: string = PathUtil.getTemp('decode', 'wav');\n  if (wavConvert[fileType] === undefined) {\n    throw new Error('Unknown file type:' + fileType);\n  }\n  if ((await (wavConvert[fileType])(inputFile, tmpFile))) {\n    return tmpFile;\n  }\n};\n\nmodule.exports = {\n  m4a: aac,\n  m4aAsync: aacAsync,\n  mp3,\n  mp3Async,\n  flac,\n  flacAsync,\n  wma: ffmpeg,\n  wmaAsync: ffmpegAsync,\n  aac,\n  aacAsync,\n  ffmpeg,\n  ffmpegAsync,\n  makeWave,\n  makeWaveAsync\n};\n"],"file":"decode.js"}